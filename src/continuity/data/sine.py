"""
`continuity.data.sine`

Various data set implementations.
"""

import torch

from continuity.discrete import RegularGridSampler
from continuity.discrete.sampler import Sampler
from .function_dataset import FunctionOperatorDataset
from .function import FunctionSet, ParameterizedFunction


class SineSet(FunctionSet):
    r"""Class representing a set of sine functions parameterized in three variables.
    $$
    f_a:x\mapsto a_1\sin(a_2 x + a_3)
    $$
    """

    def __init__(self):
        function = ParameterizedFunction(
            lambda a, x: a[0] * torch.sin(a[1] * (x + a[2])),
            n_parameters=3,
        )
        super().__init__(function)


class Sine(FunctionOperatorDataset):
    r"""A dataset of sine functions and their evaluations, generated from a set of parameterized sine functions.

    Each instance in the dataset is generated by sampling parameters for sine functions, and optionally applying
    transformations to both the input and output spaces. The sine is parameterized in three variables, represented by
    the mapping:
    $$
    f_a:x\mapsto a_1\sin(a_2 x + a_3)
    $$

    Args:
        n_sensors: The number of discrete points to sample from each sine function.
        n_observations: The total number of sine function samples to generate for the dataset.
        x_sampler: Sampler for the input space, defaulting to a regular grid between -1 and 1.
        y_sampler: Sampler for the solution space, identical to `x_sampler` by default.
        p_sampler: Sampler for the sine function parameters, defaulting to a regular grid between -1 and 1 for the
            amplitude, pi and two pi for the wavenumber, and between -1 and 1 for the phase of the sine wave.
    """

    def __init__(
        self,
        n_sensors: int,
        n_observations: int,
        x_sampler: Sampler = None,
        y_sampler: Sampler = None,
        p_sampler: Sampler = None,
    ):
        # default samplers
        if x_sampler is None:
            x_sampler = RegularGridSampler(torch.tensor([-1]), torch.tensor([1.0]))
        if y_sampler is None:
            y_sampler = RegularGridSampler(torch.tensor([-1]), torch.tensor([1.0]))
        if p_sampler is None:
            p_sampler = RegularGridSampler(
                torch.tensor([-1, torch.pi, -1]), torch.tensor([1, 2 * torch.pi, 1])
            )

        # function sets
        input_function_set = SineSet()
        solution_function_set = SineSet()

        super().__init__(
            input_function_set=input_function_set,
            x_sampler=x_sampler,
            n_sensors=n_sensors,
            solution_function_set=solution_function_set,
            y_sampler=y_sampler,
            n_evaluations=n_sensors,
            p_sampler=p_sampler,
            n_observations=n_observations,
        )
